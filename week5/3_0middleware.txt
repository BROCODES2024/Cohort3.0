# Middlewares

In Express.js, **middleware** refers to functions that have access to the request object (`req`), response object (`res`),
and the `next` function in the application's request-response cycle. Middleware functions can perform a variety of tasks, such as 

1. Modifying the request or response objects.
2. Ending the request-response cycle.
3. Calling the next middleware function in the stack.
# Route specific middlewares

**Route-specific middleware** in Express.js refers to middleware functions that are applied only to specific routes or route groups,
rather than being used globally across the entire application

# Commonly used middlewares

Through your `journey of writing express servers` , youâ€™ll find some commonly available (on npm) middlewares that you might want to use

### 1. express.json

The `express.json()` middleware is a built-in middleware function in Express.js used to parse incoming request bodies that are formatted as JSON.
This middleware is essential for handling JSON payloads sent by clients in POST or PUT requests.

const express = require('express');
const app = express();

// Use express.json() middleware to parse JSON bodies
app.use(express.json());

// Define a POST route to handle JSON data
app.post('/data', (req, res) => {
  // Access the parsed JSON data from req.body
  const data = req.body;
  console.log('Received data:', data);

  // Send a response
  res.send('Data received');
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});